services:
    #    image database
    mysql:
        image: mysql
        container_name: mysql-container
        ports:
            - "3390:3390"
        networks:
            - colegio-network
        volumes:
            - mysql-volume:/var/lib/mysql
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            MYSQL_ROOT_PASSWORD: 12345
            MYSQL_DATABASE: auth
            MYSQL_USER: root-auth
            MYSQL_PASSWORD: 12345
        command: --port=3390
#    Kafka y zookeper
    zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - colegio-network
        healthcheck:
            test: [ "CMD-SHELL", "echo 'ruok' | nc -w 2 localhost 2181 || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
    kafka:
        image: confluentinc/cp-kafka:7.3.0
        networks:
            - colegio-network
        container_name: kafka
        depends_on:
            zookeeper:
                condition: service_healthy
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        healthcheck:
            test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 30s
    kafdrop:
        image: obsidiandynamics/kafdrop:latest
        networks:
            - colegio-network
        depends_on:
            kafka:
                condition: service_healthy
        ports:
            - "19000:9000"
        environment:
            KAFKA_BROKERCONNECT: kafka:29092
    # micro services
    auth-ms-colegio:
        container_name: auth-ms-colegio
        image: auth-ms-colegio
        build:
            context: ./colegio-auth-ms/
            dockerfile: Dockerfile
        ports:
            - "8090:8080"
        networks:
            - colegio-network

#red para poder conectar todos nuestros contenedores
networks:
    colegio-network:
        driver: bridge

#persistir datos y no se pierdan
volumes:
    mysql-volume:
        driver: local